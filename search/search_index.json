{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"a monitoring bot for your servers Current features: Bot: HTTP-server for on-demand checks Watchdog: Compact daemon for monitoring and alerting Checkers: Ping, Celery/Flower, Docker containers (through SSH) Handlers: Slack, Webhook, Log, Console Integrations: Slack Speed: Async requests, Python 3.11, uvloop and FastAPI ensure the max gauge of your Python speedometer Settings: Declarative YAML. Fine tune to your liking or fire-and-forget. Docker: Pull the latest image from podkosa/moni Docs: Moni Handbook . Interactive docs at /docs Bot HTTP server, handling incoming requests (REST, slash commands, integrations, webhooks etc.). On-demand checks. Watchdog Periodically monitors servers with Checkers and alerts through Handlers. Can be run in two ways: Integrated (default). Launch inside the bot async event loop. Keep in mind that they both will share a single thread, therefore can impact performance and even block one another. More compact option, but not fit for scaling. Standalone. Run watchdog.py as a separate process/container, even without the bot. Disabled. You can turn off the watchdog completely and run checks from the bot at your own pace. Settings Define your servers, handlers, integrations and other settings declaratively in settings.yml . See example.settings.yml . Integrations Slack: alerts to channels and slash commands. Install Moni in your Workspace with ./integrations_docs/slack_app_manifest.yml . TODO Telegram integration Email handler Alert when X is not normal for more than N time Slack timeout for /commands is 3 seconds. Refactor to delay the response. Slack button on an alert to open up related service Web interface for settings and checks Endpoint to show loaded checkers and handlers Endpoint to add servers to monitoring, turn on/off already configured ones More alert handlers More server checkers Proper loop exit Optional multiprocessing, when there will be more checkers Tests","title":"Overview"},{"location":"#bot","text":"HTTP server, handling incoming requests (REST, slash commands, integrations, webhooks etc.). On-demand checks.","title":"Bot"},{"location":"#watchdog","text":"Periodically monitors servers with Checkers and alerts through Handlers. Can be run in two ways: Integrated (default). Launch inside the bot async event loop. Keep in mind that they both will share a single thread, therefore can impact performance and even block one another. More compact option, but not fit for scaling. Standalone. Run watchdog.py as a separate process/container, even without the bot. Disabled. You can turn off the watchdog completely and run checks from the bot at your own pace.","title":"Watchdog"},{"location":"#settings","text":"Define your servers, handlers, integrations and other settings declaratively in settings.yml . See example.settings.yml .","title":"Settings"},{"location":"#integrations","text":"Slack: alerts to channels and slash commands. Install Moni in your Workspace with ./integrations_docs/slack_app_manifest.yml .","title":"Integrations"},{"location":"#todo","text":"Telegram integration Email handler Alert when X is not normal for more than N time Slack timeout for /commands is 3 seconds. Refactor to delay the response. Slack button on an alert to open up related service Web interface for settings and checks Endpoint to show loaded checkers and handlers Endpoint to add servers to monitoring, turn on/off already configured ones More alert handlers More server checkers Proper loop exit Optional multiprocessing, when there will be more checkers Tests","title":"TODO"},{"location":"GettingStarted/","text":"Getting Started Ideal way to run Moni would be to set it up somewhere outside of your servers, so it doesn't go down with your production servers and can actually alert if they are down. To run Moni in a container you need to: Create settings.yml and define necessary settings (see Settings section). Pull and run a Docker image from podkosa/moni Bash docker run -v /yourdirectory/settings.yml:/moni/settings.yml podkosa/moni If you're familiar with Docker Compose see example.docker-compose.yml in the GitHub repo.","title":"Getting Started"},{"location":"GettingStarted/#getting-started","text":"Ideal way to run Moni would be to set it up somewhere outside of your servers, so it doesn't go down with your production servers and can actually alert if they are down. To run Moni in a container you need to: Create settings.yml and define necessary settings (see Settings section). Pull and run a Docker image from podkosa/moni Bash docker run -v /yourdirectory/settings.yml:/moni/settings.yml podkosa/moni If you're familiar with Docker Compose see example.docker-compose.yml in the GitHub repo.","title":"Getting Started"},{"location":"bot/","text":"Bot Moni Bot allows you to send HTTP GET requests to it's endpoints for on-demand checks. Response body will contain: JSON { \"host\" : s tr , \"check\" : s tr , \"status\" : bool , \"message\" : s tr }","title":"Bot"},{"location":"bot/#bot","text":"Moni Bot allows you to send HTTP GET requests to it's endpoints for on-demand checks. Response body will contain: JSON { \"host\" : s tr , \"check\" : s tr , \"status\" : bool , \"message\" : s tr }","title":"Bot"},{"location":"bot/Integrations/","text":"Integrations allow you to run on-demand checks as slash commands from your favorite messenger. Integrations and Handlers Integrations are not to be confused with similar Handlers , used for alerts. Slack Install Moni as an App in your Slack Workspace to run slash commands. See /integrations/slack_app_manifest.yml in the GitHub repo.","title":"Integrations"},{"location":"bot/Integrations/#slack","text":"Install Moni as an App in your Slack Workspace to run slash commands. See /integrations/slack_app_manifest.yml in the GitHub repo.","title":"Slack"},{"location":"checkers/","text":"Checkers Checkers are what Moni uses to monitor your servers. Define them in settings.yml in lowercase, provide necessary settings, list servers you want to monitor.","title":"Checkers"},{"location":"checkers/#checkers","text":"Checkers are what Moni uses to monitor your servers. Define them in settings.yml in lowercase, provide necessary settings, list servers you want to monitor.","title":"Checkers"},{"location":"checkers/Docker/","text":"Checks Docker containers status. Runs docker ps -a --format ... on your servers. Requires SSH (see Settings/SSH ). settings.yml checkers : docker : servers : host1.com : # port: 22 # handlers: [...] # cycle: 300 host2_alias :","title":"Docker"},{"location":"checkers/Flower/","text":"Checks workers status and queues sizes of your Celery server through Flower endpoints flower/api/workers and flower/api/queues/length . settings.yml checkers : flower : options : queues : size_threshold : 100 workers : servers : host1.com : endpoint : path/to/ping/ user : user1 password : password1 # handlers: [...] # cycle: 300","title":"Flower"},{"location":"checkers/Ping/","text":"Basic Checker that sends an HTTP GET request to your server and alerts if the response is 4** , 5** or if it couldn't connect. Can do basic user-password authentication. settings.yml checkers : ping : servers : host1.com : endpoint : path/to/ping/ # user: user1 # password: password1 # handlers: [...] # cycle: 300","title":"Ping"},{"location":"handlers/","text":"Handlers Handlers are what Moni uses to send alerts. Define them in settings.yml in lowercase, provide necessary settings. In Checkers list what Handlers to use.","title":"Handlers"},{"location":"handlers/#handlers","text":"Handlers are what Moni uses to send alerts. Define them in settings.yml in lowercase, provide necessary settings. In Checkers list what Handlers to use.","title":"Handlers"},{"location":"handlers/Console/","text":"Outputs alerts to STDOUT. settings.yml handlers : console :","title":"Console"},{"location":"handlers/Log/","text":"Writes alerts to a file in /moni/logs directory. Log size Rotation is not implemented yet, so be sure to clean up (e.g. with a cron periodic task) Containerization If you're deploying inside a container (e.g. Docker), be sure to mount ./logs/:/moni/logs through volumes settings.yml handlers : log : filename : moni.log","title":"Log"},{"location":"handlers/Slack/","text":"Sends alerts to your Slack channel. settings.yml handlers : slack : webhook_url : https://hooks.slack.com/services/...","title":"Slack"},{"location":"handlers/Webhook/","text":"Sends a POST request to your url with check results. JSON { \"host\" : s tr , \"check\" : s tr , \"status\" : bool , \"message\" : s tr } settings.yml handlers : webhook : url : http://your/webhook/url/ user : user password : password headers : header1 : header1 cookies : cookie1 : cookie1","title":"Webhook"},{"location":"settings/","text":"Settings Main concept behind Moni is simplicity. For that, it uses declarative YAML settings. Choose what you like from Checkers, Handlers and Integrations, set up Bot/Watchdog and you're ready to go. Consult with example.settings.yml or follow up with an Example . Basic server parameters Shared across all checkers are cycle , handlers , protocol , port , back_to_normal , back_to_normal_cycle . cycle : integer | float Seconds to wait between checks. Defaults to 300 seconds or 5 minutes. Precision Since Moni relies heavily on asynchronicity, this is implemented as a sleep between checks. For that, cycle is not absolute and may be slightly delayed by other running code. handlers : list[str] List of handlers, through which alerts will be sent. For example [console, log, slack] will output to STDOUT , write to ./logs/moni.log and send a message to a Slack channel. Those 3 Handlers would have to be explicitly defined in the settings as well. protocol : http , https Protocol to use for the requests. Defaults to https . port : int Port to use for the requests. Defaults to not None , so 443(HTTPS) and 22(SSH) are used. back_to_normal : bool Optional \"back to normal\" messages. On a negative check alert normally, on further negative checks do not alert again, on a successful check send \"back to normal\" message. Defaults to False . back_to_normal_cycle : integer | float Optional back to normal follow up cycle. Set this to less than cycle to do follow up checks faster. Defaults to cycle . Defaults Default parameters might be specified to avoid repeating them for each server. Can be defined on Checker or Watchdog level. Lookup order is Server, Checker, Watchdog. Request timeout You can set a custom timeout for Checkers requests to your servers. Default is: settings.yml request_timeout : 10 Moni self alert Moni can send messages when it is starting up or shutting down. settings.yml on_startup_handlers : [ ... ] on_shutdown_handlers : [ ... ] Datetime format For certain Handlers (like ConsoleHandler and LogHandler ) a timestamp is used. You can customize the format. Default is: settings.yml dttm_format : '%Y-%m-%d %H:%M:%S' Logging If you want to make sure that you've set everything correctly and checks are actually running, you can set Moni internal logging level from default info to debug . settings.yml logger_level : debug And see something like: Bash Session Running PingChecker(podkosa.github.io) Finished PingChecker(podkosa.github.io)","title":"Settings"},{"location":"settings/#settings","text":"Main concept behind Moni is simplicity. For that, it uses declarative YAML settings. Choose what you like from Checkers, Handlers and Integrations, set up Bot/Watchdog and you're ready to go. Consult with example.settings.yml or follow up with an Example .","title":"Settings"},{"location":"settings/#basic-server-parameters","text":"Shared across all checkers are cycle , handlers , protocol , port , back_to_normal , back_to_normal_cycle . cycle : integer | float Seconds to wait between checks. Defaults to 300 seconds or 5 minutes. Precision Since Moni relies heavily on asynchronicity, this is implemented as a sleep between checks. For that, cycle is not absolute and may be slightly delayed by other running code. handlers : list[str] List of handlers, through which alerts will be sent. For example [console, log, slack] will output to STDOUT , write to ./logs/moni.log and send a message to a Slack channel. Those 3 Handlers would have to be explicitly defined in the settings as well. protocol : http , https Protocol to use for the requests. Defaults to https . port : int Port to use for the requests. Defaults to not None , so 443(HTTPS) and 22(SSH) are used. back_to_normal : bool Optional \"back to normal\" messages. On a negative check alert normally, on further negative checks do not alert again, on a successful check send \"back to normal\" message. Defaults to False . back_to_normal_cycle : integer | float Optional back to normal follow up cycle. Set this to less than cycle to do follow up checks faster. Defaults to cycle .","title":"Basic server parameters"},{"location":"settings/#defaults","text":"Default parameters might be specified to avoid repeating them for each server. Can be defined on Checker or Watchdog level. Lookup order is Server, Checker, Watchdog.","title":"Defaults"},{"location":"settings/#request-timeout","text":"You can set a custom timeout for Checkers requests to your servers. Default is: settings.yml request_timeout : 10","title":"Request timeout"},{"location":"settings/#moni-self-alert","text":"Moni can send messages when it is starting up or shutting down. settings.yml on_startup_handlers : [ ... ] on_shutdown_handlers : [ ... ]","title":"Moni self alert"},{"location":"settings/#datetime-format","text":"For certain Handlers (like ConsoleHandler and LogHandler ) a timestamp is used. You can customize the format. Default is: settings.yml dttm_format : '%Y-%m-%d %H:%M:%S'","title":"Datetime format"},{"location":"settings/#logging","text":"If you want to make sure that you've set everything correctly and checks are actually running, you can set Moni internal logging level from default info to debug . settings.yml logger_level : debug And see something like: Bash Session Running PingChecker(podkosa.github.io) Finished PingChecker(podkosa.github.io)","title":"Logging"},{"location":"settings/Example/","text":"Let's say we need check every 5 seconds that podkosa.github.io/moni/ is up and returns a 2xx response. And if something is wrong, let's alert to standard STDOUT . Looks simple enough! For that we consulted our Moni Handbook and found a PingChecker and a ConsoleHandler . Let's create a settings.yml file in the project directory and fill it as we go. Security This file will include your sensitive data, so be sure to take security measures Containerization If you're deploying inside a container (e.g. Docker), be sure to mount ./settings.yml:/moni/settings.yml through volumes API key Bot endpoints are protected with an API key. Pass it as a cookie, header or query parameter named access_token with you requests to Moni. settings.yml api_key : key Integrations Various integrations (like Slack and Telegram) use their own authentications methods and are not dependent on the Moni API key. Consult Integrations section for more info. Checker settings.yml checkers : ping : servers : host1.com : endpoint : path/to/ping/ protocol : 'https' cycle : 300 handlers : [ console ] Here we have a basic configurations of a Checker . Top level checkers must include named Checkers . For our example we chose a PingChecker , so we defined ping . Next we need to define our servers . They consist of key:value pairs that represent host:config . Handler Now let's define a Handler , so Moni knows how to alert you if something goes wrong. For this example we keep it simple and just print out to STDOUT with ConsoleHandler , so we simple defined console . This simple handler doesn't require additional settings, so let's move on. settings.yml handlers : console : Watchdog With all of the above set, we have one last step to take (or rather one last to throw). Defining our Watchdog , that will run checks periodically. settings.yml watchdog : integrated : true Watchdog Consult Watchdog section for more details on this good pupper. Starting up Moni All set! Just start up Moni and you'll see something like: Bash Session INFO: Started server process [1] INFO: Waiting for application startup. Watchdog is running INFO: Application startup complete. INFO: Uvicorn running on http://0.0.0.0:80 (Press CTRL+C to quit) Moni is up and Watchdog is already running your checks. When our host will not response, you'll see a message with details on what went wrong. Bash Session 2022-10-31 12:00:00 PingChecker(podkosa.github.io) Cannot connect to host podkosa.github.io:443 ssl:default [Name or service not known] 2022-10-31 12:05:00 PingChecker(podkosa.github.io) 404, message='Not Found', url=URL('https://podkosa.github.io/moni/') ...","title":"Example"},{"location":"settings/Example/#api-key","text":"Bot endpoints are protected with an API key. Pass it as a cookie, header or query parameter named access_token with you requests to Moni. settings.yml api_key : key Integrations Various integrations (like Slack and Telegram) use their own authentications methods and are not dependent on the Moni API key. Consult Integrations section for more info.","title":"API key"},{"location":"settings/Example/#checker","text":"settings.yml checkers : ping : servers : host1.com : endpoint : path/to/ping/ protocol : 'https' cycle : 300 handlers : [ console ] Here we have a basic configurations of a Checker . Top level checkers must include named Checkers . For our example we chose a PingChecker , so we defined ping . Next we need to define our servers . They consist of key:value pairs that represent host:config .","title":"Checker"},{"location":"settings/Example/#handler","text":"Now let's define a Handler , so Moni knows how to alert you if something goes wrong. For this example we keep it simple and just print out to STDOUT with ConsoleHandler , so we simple defined console . This simple handler doesn't require additional settings, so let's move on. settings.yml handlers : console :","title":"Handler"},{"location":"settings/Example/#watchdog","text":"With all of the above set, we have one last step to take (or rather one last to throw). Defining our Watchdog , that will run checks periodically. settings.yml watchdog : integrated : true Watchdog Consult Watchdog section for more details on this good pupper.","title":"Watchdog"},{"location":"settings/Example/#starting-up-moni","text":"All set! Just start up Moni and you'll see something like: Bash Session INFO: Started server process [1] INFO: Waiting for application startup. Watchdog is running INFO: Application startup complete. INFO: Uvicorn running on http://0.0.0.0:80 (Press CTRL+C to quit) Moni is up and Watchdog is already running your checks. When our host will not response, you'll see a message with details on what went wrong. Bash Session 2022-10-31 12:00:00 PingChecker(podkosa.github.io) Cannot connect to host podkosa.github.io:443 ssl:default [Name or service not known] 2022-10-31 12:05:00 PingChecker(podkosa.github.io) 404, message='Not Found', url=URL('https://podkosa.github.io/moni/') ...","title":"Starting up Moni"},{"location":"settings/SSH/","text":"Some checkers (like DockerChecker ) use SSH. Configure your SSH access from Moni host to your servers as normal, then mount .ssh/ directory to Moni container through a volume. docker-compose.yml services : moni : volumes : - '~/.ssh/:/root/.ssh:ro' UNIX permissions Make sure that you set UNIX ownership/permissions, so that Moni container can read it. Bash chown root: $USER ~/.ssh/config chmod 644 ~/.ssh/config ssh-add -k ~/.ssh/id_rsa SSH Config file Recommend you to get familiar with .ssh/config and how to pre-set aliases for your connections. Moni accepts Host aliases as server's host setting and will use it's configs for connections. This is the recommended way. config Host host_alias HostName your.host.com # or IP User root IdentityFile ~/.ssh/some_key.pub settings.yml checkers : docker : servers : host_alias :","title":"SSH"},{"location":"settings/SSH/#unix-permissions","text":"Make sure that you set UNIX ownership/permissions, so that Moni container can read it. Bash chown root: $USER ~/.ssh/config chmod 644 ~/.ssh/config ssh-add -k ~/.ssh/id_rsa","title":"UNIX permissions"},{"location":"settings/SSH/#ssh-config-file","text":"Recommend you to get familiar with .ssh/config and how to pre-set aliases for your connections. Moni accepts Host aliases as server's host setting and will use it's configs for connections. This is the recommended way. config Host host_alias HostName your.host.com # or IP User root IdentityFile ~/.ssh/some_key.pub settings.yml checkers : docker : servers : host_alias :","title":"SSH Config file"}]}